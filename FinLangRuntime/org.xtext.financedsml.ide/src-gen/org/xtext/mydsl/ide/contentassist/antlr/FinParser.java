/*
 * generated by Xtext 2.33.0
 */
package org.xtext.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.mydsl.ide.contentassist.antlr.internal.InternalFinParser;
import org.xtext.mydsl.services.FinGrammarAccess;

public class FinParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(FinGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, FinGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
			builder.put(grammarAccess.getAssetAccess().getAlternatives(), "rule__Asset__Alternatives");
			builder.put(grammarAccess.getTransactionAccess().getAlternatives(), "rule__Transaction__Alternatives");
			builder.put(grammarAccess.getBuyAccess().getAlternatives_2(), "rule__Buy__Alternatives_2");
			builder.put(grammarAccess.getDisplayTypeAccess().getAlternatives(), "rule__DisplayType__Alternatives");
			builder.put(grammarAccess.getOptionTypeAccess().getAlternatives(), "rule__OptionType__Alternatives");
			builder.put(grammarAccess.getPortfolioAccess().getGroup(), "rule__Portfolio__Group__0");
			builder.put(grammarAccess.getBondAccess().getGroup(), "rule__Bond__Group__0");
			builder.put(grammarAccess.getOptionAccess().getGroup(), "rule__Option__Group__0");
			builder.put(grammarAccess.getCashAccess().getGroup(), "rule__Cash__Group__0");
			builder.put(grammarAccess.getBuyAccess().getGroup(), "rule__Buy__Group__0");
			builder.put(grammarAccess.getSellAccess().getGroup(), "rule__Sell__Group__0");
			builder.put(grammarAccess.getDepositAccess().getGroup(), "rule__Deposit__Group__0");
			builder.put(grammarAccess.getWithdrawalAccess().getGroup(), "rule__Withdrawal__Group__0");
			builder.put(grammarAccess.getDisplayAccess().getGroup(), "rule__Display__Group__0");
			builder.put(grammarAccess.getFLOATAccess().getGroup(), "rule__FLOAT__Group__0");
			builder.put(grammarAccess.getModelAccess().getElementAssignment(), "rule__Model__ElementAssignment");
			builder.put(grammarAccess.getPortfolioAccess().getAssetAssignment_2(), "rule__Portfolio__AssetAssignment_2");
			builder.put(grammarAccess.getBondAccess().getNameAssignment_1(), "rule__Bond__NameAssignment_1");
			builder.put(grammarAccess.getBondAccess().getFaceValueAssignment_4(), "rule__Bond__FaceValueAssignment_4");
			builder.put(grammarAccess.getBondAccess().getCouponRateAssignment_6(), "rule__Bond__CouponRateAssignment_6");
			builder.put(grammarAccess.getBondAccess().getMaturityAssignment_8(), "rule__Bond__MaturityAssignment_8");
			builder.put(grammarAccess.getBondAccess().getYieldRateAssignment_10(), "rule__Bond__YieldRateAssignment_10");
			builder.put(grammarAccess.getOptionAccess().getNameAssignment_1(), "rule__Option__NameAssignment_1");
			builder.put(grammarAccess.getOptionAccess().getTypeAssignment_4(), "rule__Option__TypeAssignment_4");
			builder.put(grammarAccess.getOptionAccess().getUnderlyingPriceAssignment_6(), "rule__Option__UnderlyingPriceAssignment_6");
			builder.put(grammarAccess.getOptionAccess().getStrikePriceAssignment_8(), "rule__Option__StrikePriceAssignment_8");
			builder.put(grammarAccess.getOptionAccess().getTimeToExpirationAssignment_10(), "rule__Option__TimeToExpirationAssignment_10");
			builder.put(grammarAccess.getOptionAccess().getRiskFreeRateAssignment_12(), "rule__Option__RiskFreeRateAssignment_12");
			builder.put(grammarAccess.getOptionAccess().getVolatilityAssignment_14(), "rule__Option__VolatilityAssignment_14");
			builder.put(grammarAccess.getOptionAccess().getDividendYieldAssignment_16(), "rule__Option__DividendYieldAssignment_16");
			builder.put(grammarAccess.getCashAccess().getAmountAssignment_3(), "rule__Cash__AmountAssignment_3");
			builder.put(grammarAccess.getBuyAccess().getBondAssignment_2_0(), "rule__Buy__BondAssignment_2_0");
			builder.put(grammarAccess.getBuyAccess().getOptionAssignment_2_1(), "rule__Buy__OptionAssignment_2_1");
			builder.put(grammarAccess.getSellAccess().getNameAssignment_3(), "rule__Sell__NameAssignment_3");
			builder.put(grammarAccess.getSellAccess().getAmountAssignment_5(), "rule__Sell__AmountAssignment_5");
			builder.put(grammarAccess.getDepositAccess().getAmountAssignment_1(), "rule__Deposit__AmountAssignment_1");
			builder.put(grammarAccess.getWithdrawalAccess().getAmountAssignment_1(), "rule__Withdrawal__AmountAssignment_1");
			builder.put(grammarAccess.getDisplayAccess().getDisplayTypeAssignment_1(), "rule__Display__DisplayTypeAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private FinGrammarAccess grammarAccess;

	@Override
	protected InternalFinParser createParser() {
		InternalFinParser result = new InternalFinParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public FinGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(FinGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
