/**
 * generated by Xtext 2.33.0
 */
package org.xtext.mydsl.fin.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.mydsl.fin.Display;
import org.xtext.mydsl.fin.FinPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Display</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.mydsl.fin.impl.DisplayImpl#getDisplayType <em>Display Type</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DisplayImpl extends ActionImpl implements Display
{
  /**
   * The default value of the '{@link #getDisplayType() <em>Display Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDisplayType()
   * @generated
   * @ordered
   */
  protected static final String DISPLAY_TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDisplayType() <em>Display Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDisplayType()
   * @generated
   * @ordered
   */
  protected String displayType = DISPLAY_TYPE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DisplayImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FinPackage.Literals.DISPLAY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDisplayType()
  {
    return displayType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDisplayType(String newDisplayType)
  {
    String oldDisplayType = displayType;
    displayType = newDisplayType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FinPackage.DISPLAY__DISPLAY_TYPE, oldDisplayType, displayType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FinPackage.DISPLAY__DISPLAY_TYPE:
        return getDisplayType();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FinPackage.DISPLAY__DISPLAY_TYPE:
        setDisplayType((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FinPackage.DISPLAY__DISPLAY_TYPE:
        setDisplayType(DISPLAY_TYPE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FinPackage.DISPLAY__DISPLAY_TYPE:
        return DISPLAY_TYPE_EDEFAULT == null ? displayType != null : !DISPLAY_TYPE_EDEFAULT.equals(displayType);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (displayType: ");
    result.append(displayType);
    result.append(')');
    return result.toString();
  }

} //DisplayImpl
